# -*- coding: utf-8 -*-
"""compare_latex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ii51Ywq_4pndEZyb6KiU8zFivyaQCvGn
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import sys
import os
import subprocess

def calculate_similarity(text1, text2):
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform([text1, text2])
    similarity = cosine_similarity(vectors[0], vectors[1])[0][0]
    return similarity

def save_report(sim_text, sim_mat, output_file,f1,f2):
    # Create a report and save it to a text file
    with open(output_file, 'w', encoding='utf-8') as report_file:
        report_file.write("Files Similarity Report\n")
        report_file.write("=======================\n")
        report_file.write(f"File 1: {f1}\n")
        report_file.write(f"File 2: {f2}\n")
        report_file.write(f"Text Similarity Score: {sim_text * 100:.2f}%\n")
        report_file.write(f"Formulas Similarity Score: {sim_mat * 100:.2f}%\n")
        report_file.write("=======================\n")

def txt_to_latex(input_txt_file, output_tex_file):
    # Read the input text file
    with open(input_txt_file, 'r', encoding='utf-8') as txt_file:
        content = txt_file.read()

    # Create a basic LaTeX structure
    latex_content = r"""
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{geometry}
\geometry{a4paper, margin=1in}

\begin{document}

\section*{Text Content}
""" + content + r"""

\end{document}
"""

    # Write to the output .tex file
    with open(output_tex_file, 'w', encoding='utf-8') as tex_file:
        tex_file.write(latex_content)

    print(f"LaTeX file saved as {output_tex_file}")


def read_file(f1):
    try:
        with open(f1, 'r', encoding='utf-8') as f:
            current_dir = os.path.dirname(os.path.abspath(__file__))
            konwerter = os.path.join(current_dir, "Konwerter.py")
            wynik1 = subprocess.run(['python', konwerter, f1], capture_output=True, text=True)            
       
            output_lines = wynik1.stdout.strip().split("###################")

            plain_text_1 = output_lines[0]  
            formulas_1 = output_lines[1]
            
        return plain_text_1,formulas_1
    except FileNotFoundError:
        print(f"Plik nie został znaleziony! Ścieżka: {f1}")

# File paths
print('raport1.py')
f1 = sys.argv[1]
f2 = sys.argv[2]
current_dir=sys.argv[3]

plain_text_1,formulas_1=read_file(f1)
plain_text_2,formulas_2=read_file(f2)

sim_text= calculate_similarity(plain_text_1, plain_text_2)
sim_mat = calculate_similarity(formulas_1, formulas_2)

output_file = os.path.join(current_dir, "reports", "report1.txt")

save_report(sim_text,sim_mat, output_file,f1,f2)
print(f"Report saved to {output_file}")

# Specify input and output files
input_txt_file = os.path.join(current_dir, "reports", "report1.txt")
output_tex_file = os.path.join(current_dir, "reports", "report1.tex")

# Convert the text file to LaTeX
txt_to_latex(input_txt_file, output_tex_file)